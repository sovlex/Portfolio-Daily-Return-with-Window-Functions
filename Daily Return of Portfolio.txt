SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Creating table for Security Prices

if object_id('[dbo].[tblSecurityPrices]') is not null drop table [dbo].[tblSecurityPrices];

CREATE TABLE [dbo].[tblSecurityPrices](
	[Trade_date] [datetime] NOT NULL,
	[SecurityID] [nvarchar](2) NOT NULL,
	[Price] [numeric](18, 4) NOT NULL,
 CONSTRAINT [PK_tblSecurityPrices] PRIMARY KEY CLUSTERED 
(
	[Trade_date] ASC,
	[SecurityID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[tblSecurityPrices] ADD  CONSTRAINT [DF_tblSecurityPrices_Price]  DEFAULT ((0)) FOR [Price]
GO

-- Inserting Security prices

insert into dbo.tblSecurityPrices VALUES('2006-01-17','M1',11.71);
insert into dbo.tblSecurityPrices VALUES('2006-01-17','M2',13.09);
insert into dbo.tblSecurityPrices VALUES('2006-01-18','M1',12.62);
insert into dbo.tblSecurityPrices VALUES('2006-01-18','M2',13.27);
GO

-- Creating table for Portfolios

if object_id('[dbo].[tblPortfolio]') is not null drop table [dbo].[tblPortfolio];

CREATE TABLE [dbo].[tblPortfolio](
	[PortfolioID] [nvarchar](50) NOT NULL,
	[Trade_date] [date] NOT NULL,
	[SecurityID] [nvarchar](2) NOT NULL,
	[Weight] [numeric](18, 4) NULL,
 CONSTRAINT [PK_tblPortfolio] PRIMARY KEY CLUSTERED 
(
	[PortfolioID] ASC,
	[Trade_date] ASC,
	[SecurityID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Inserting Security weights in Portfolio 1

insert into dbo.tblPortfolio VALUES('Portfolio 1','2006-01-17','M1',0.0590);
insert into dbo.tblPortfolio VALUES('Portfolio 1','2006-01-17','M2',0.9410);
insert into dbo.tblPortfolio VALUES('Portfolio 1','2006-01-18','M1',0.0590);
insert into dbo.tblPortfolio VALUES('Portfolio 1','2006-01-18','M2',0.9410);
GO

-- Using T-SQL Window functions to calculate Amount Invested, Amount Obtained and Daily Return

select c1.PortfolioID [Portfolio ID], c1.Trade_date [Trade Date], CAST(c1.[AI] as money) [Amount Invested], CAST(c1.[AO] as money) [Amount Obtained], FORMAT(c1.[AO]/c1.[AI]-1,'P') [Daily Return]
FROM (
select c0.PortfolioID, c0.Trade_date, SUM(c0.[AI]) As [AI], SUM(c0.[AO]) As [AO] 
FROM (
select Pt.PortfolioID, Pt.Trade_date,  ISNULL((MAX(Sp.Price) OVER(PARTITION BY Pt.PortfolioID, Pt.SecurityID  ORDER BY  Pt.Trade_date
ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) *   Max(Pt.Weight) OVER(PARTITION BY Pt.PortfolioID,  Pt.SecurityID  ORDER BY  Pt.Trade_date
ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING))/100,0) [AI],
ISNULL(Sp.Price * Max(Pt.Weight) OVER(PARTITION BY Pt.PortfolioID,  Pt.SecurityID  ORDER BY  Pt.Trade_date
ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)/100,0) [AO]
FROM dbo.tblPortfolio Pt
join dbo.tblSecurityPrices Sp on sp.SecurityID = Pt.SecurityID and sp.Trade_date = pt.Trade_date
) c0
where c0.[AI] > 0
group by c0.PortfolioID, c0.Trade_date
) c1 
order by PortfolioID, Trade_date;
GO
